#version 450
layout(local_size_x = 32, local_size_y = 32) in;
//layout(r11f_g11f_b10f, binding = 0) uniform image2D img_input;
layout(rgba16f, binding = 0) uniform image2D img_input;
layout(rgba16f, binding = 1) uniform image2D img_output;

uniform float offset[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);
uniform float weight[5] = float[](0.2270270270, 0.1945945946, 0.1216216216,
                                  0.0540540541, 0.0162162162);

void main() {

	vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	//imageStore(img_output, pixel_coords, pixel);
	ivec2 up_coords = (pixel_coords * imageSize(img_input)) / imageSize(img_output);

	vec4 upscaled = imageLoad(img_input, up_coords);

	pixel = upscaled * weight[0];
	//vec4 pixel = imageLoad(img_input, pixel_coords);

	//ivec2 clampMin = ivec2(0);
	//ivec2 clampMax = ivec2(imageSize(img_input)) - 2;

	for (int i=1; i<5; i++) {
		//pixel += imageLoad(img_input, clamp(ivec2(up_coords + vec2(0.0, offset[i])), clampMin, clampMax)) * weight[i];
		//pixel += imageLoad(img_input, clamp(ivec2(up_coords - vec2(0.0, offset[i])), clampMin, clampMax)) * weight[i];
		vec4 positive = imageLoad(img_input, ivec2(up_coords + vec2(0.0, offset[i])));
        bool invalid = isnan(positive.x) || isnan(positive.y) || isnan(positive.z);
		
		if(invalid) {
			pixel += upscaled * weight[i];
		} else {
			pixel += positive * weight[i];
		}
		
		vec4 negative = imageLoad(img_input, ivec2(up_coords - vec2(0.0, offset[i])));
        invalid = isnan(negative.x) || isnan(negative.y) || isnan(negative.z);
		
		if(invalid) {
			pixel += upscaled * weight[i];
		} else {
			pixel += negative * weight[i];
		}
        //pixel += imageLoad(img_input, ivec2(up_coords + vec2(0.0, offset[i]))) * weight[i];
        //pixel += imageLoad(img_input, ivec2(up_coords - vec2(0.0, offset[i]))) * weight[i];
    }

	//bool invalid = isnan(pixel.x) || isnan(pixel.y) || isnan(pixel.z);

	//if(!invalid) {
		imageStore(img_output, pixel_coords, pixel);
		//}
}